version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: docker/web.dockerfile
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=${ASPNETCORE_URLS}
      - ConnectionStrings__DefaultConnection=Host=db;Database=${POSTGRES_DB};Username=postgres;Password=${POSTGRES_PASSWORD}
      - Redis__Configuration=${REDIS_URL}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      seq:
        condition: service_started

  db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data

  seq:
    image: datalust/seq:latest
    environment:
      - ACCEPT_EULA=${SEQ_EULA}
    ports:
      - "5341:80" 

volumes:
  postgres_data:
  redis_data: