services:
  web:
    build:
      context: .
      dockerfile: docker/web.dockerfile
    env_file: .env
    ports:
      - "${WEB_PORT}:${APP_PORT}"
    environment:
      - ConnectionStrings__HangfireConnection=${CONNECTIONSTRINGS__HANGFIRECONNECTION}
      - ASPNETCORE_URLS=http://+:${APP_PORT}
      - ConnectionStrings__DefaultConnection=${CONNECTIONSTRINGS__DEFAULTCONNECTION}
      - Redis__Configuration=${REDIS_CONFIGURATION}
      - Jwt__Secret=${JWT_SECRET}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - Jwt__AccessTokenExpiration=${JWT_EXPIRE_MINUTES}
      - Jwt__RefreshTokenExpiration=${JWT_EXPIRE_MINUTES}     
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${APP_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  hangfire:
    build:
      context: .
      dockerfile: docker/hangfire.dockerfile
    env_file: .env
    environment:
      - ConnectionStrings__HangfireConnection=${CONNECTIONSTRINGS__HANGFIRECONNECTION}
      - ASPNETCORE_URLS=http://+:${APP_PORT}
      - ConnectionStrings__DefaultConnection=${CONNECTIONSTRINGS__DEFAULTCONNECTION}
      - Redis__Configuration=${REDIS_CONFIGURATION}
      - Jwt__Secret=${JWT_SECRET}
      - Jwt__Issuer=${JWT_ISSUER}
      - Jwt__Audience=${JWT_AUDIENCE}
      - Jwt__AccessTokenExpiration=${JWT_EXPIRE_MINUTES}
      - Jwt__RefreshTokenExpiration=${JWT_EXPIRE_MINUTES}    
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend

  db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-hangfire-schema.sql:/docker/init-hangfire-schema.sql
    networks:
      - backend

  redis:
    image: redis:7
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - backend

  minio:
    image: minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}     
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://${MINIO_ENDPOINT}/minio/health/live; }                     # check if Minio is alive
        minio $0 "$@" --quiet & echo $! > /tmp/minio.pid                                  # start Minio in the background
        while ! isAlive; do sleep 0.1; done                                               # wait until Minio is alive
        mc alias set minio http://${MINIO_ENDPOINT} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}  # setup Minio client
        mc mb minio/${MINIO_BUCKET}  || true                                              # create a test bucket
        mc anonymous set public minio/${MINIO_BUCKET}                                     # make the test bucket public
        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid                            # stop Minio
        while isAlive; do sleep 0.1; done                                                 # wait until Minio is stopped
        exec minio $0 "$@"                                                                # start Minio in the foreground
      '
    command: server /data --json --console-address ':${MINIO_WEB_PORT}'
    ports: ['${MINIO_API_PORT}:${MINIO_API_PORT}/tcp', '${MINIO_WEB_PORT}:${MINIO_WEB_PORT}/tcp'] 
    volumes: [minio_data:/data:rw]
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://${MINIO_URL}/minio/health/live']
      interval: 10s
      start_interval: 1s
      start_period: 10s
    security_opt: [no-new-privileges:true]
    networks:
      - backend

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    depends_on:
      web:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - backend

  seq:
    image: datalust/seq:latest
    environment:
      - ACCEPT_EULA=${SEQ_EULA}
    ports:
      - "${SEQ_PORT}:${SEQ_PORT}" 

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_LOG_MODE: console
      GF_LOG_LEVEL: error

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgresql://postgres:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable
    depends_on:
      db:
        condition: service_healthy

  redis-exporter:
    image: oliver006/redis_exporter
    environment:
      REDIS_ADDR: ${REDIS_HOST}:${REDIS_PORT}
    depends_on:
      redis:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
  minio_data:
  nginx_logs:

networks:
  backend:
    driver: bridge